{"ast":null,"code":"/**\n * Capitalizes string.\n *\n * @param  {String} string\n * @return {String}\n */\nconst capitalize = string => {\n  if (!string) return string;\n  return string[0].toUpperCase() + string.slice(1);\n};\n/**\n * Capitalizes words.\n *\n * @param  {String} words\n * @return {String}\n */\n\n\nexport const capitalizeWords = words => {\n  const wordsArray = words.split(' '); // single word\n\n  if (wordsArray.length === 1) {\n    return capitalize(words);\n  } // multiple words\n\n\n  return wordsArray.reduce((accumulatedWords, word) => {\n    // first word\n    if (!accumulatedWords) return capitalize(word); // empty array item\n\n    if (!word) return accumulatedWords; // concatenate word\n\n    return `${accumulatedWords} ${capitalize(word)}`;\n  }, '');\n};\nlet fullYear;\n/**\n * Gets full year.\n *\n * @return {Number}\n */\n\nexport const getFullYear = () => {\n  if (!fullYear) {\n    fullYear = new Date().getFullYear();\n  }\n\n  return fullYear;\n};\n/**\n * Truncates text.\n *\n * @param  {String} text\n * @param  {Number} [limit]\n * @return {String}\n */\n\nexport const truncate = (text, limit) => {\n  if (typeof text !== 'string') return '';\n\n  if (text.length > limit) {\n    // truncate string based on limit\n    text = text.substring(0, limit);\n  } // truncate to last whitespace if applicable\n\n\n  const lastSpaceIndex = text.lastIndexOf(' ');\n\n  if (lastSpaceIndex !== -1) {\n    text = text.substring(0, lastSpaceIndex);\n  } // trim trailing whitespace/periods\n\n\n  return text.replace(/[\\s.]+$/g, '');\n};","map":{"version":3,"sources":["/Users/trinadhkoya/WebstormProjects/huddle-home-assignment/src/helpers/utilities.js"],"names":["capitalize","string","toUpperCase","slice","capitalizeWords","words","wordsArray","split","length","reduce","accumulatedWords","word","fullYear","getFullYear","Date","truncate","text","limit","substring","lastSpaceIndex","lastIndexOf","replace"],"mappings":"AAAA;;;;;;AAMA,MAAMA,UAAU,GAAGC,MAAM,IAAI;AACzB,MAAI,CAACA,MAAL,EAAa,OAAOA,MAAP;AACb,SAAOA,MAAM,CAAC,CAAD,CAAN,CAAUC,WAAV,KAA0BD,MAAM,CAACE,KAAP,CAAa,CAAb,CAAjC;AACH,CAHD;AAKA;;;;;;;;AAMA,OAAO,MAAMC,eAAe,GAAGC,KAAK,IAAI;AACpC,QAAMC,UAAU,GAAGD,KAAK,CAACE,KAAN,CAAY,GAAZ,CAAnB,CADoC,CAGpC;;AACA,MAAID,UAAU,CAACE,MAAX,KAAsB,CAA1B,EAA6B;AACzB,WAAOR,UAAU,CAACK,KAAD,CAAjB;AACH,GANmC,CAQpC;;;AACA,SAAOC,UAAU,CAACG,MAAX,CAAkB,CAACC,gBAAD,EAAmBC,IAAnB,KAA4B;AACjD;AACA,QAAI,CAACD,gBAAL,EAAuB,OAAOV,UAAU,CAACW,IAAD,CAAjB,CAF0B,CAIjD;;AACA,QAAI,CAACA,IAAL,EAAW,OAAOD,gBAAP,CALsC,CAOjD;;AACA,WAAQ,GAAEA,gBAAiB,IAAGV,UAAU,CAACW,IAAD,CAAO,EAA/C;AACH,GATM,EASJ,EATI,CAAP;AAUH,CAnBM;AAqBP,IAAIC,QAAJ;AAEA;;;;;;AAKA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC7B,MAAI,CAACD,QAAL,EAAe;AACXA,IAAAA,QAAQ,GAAG,IAAIE,IAAJ,GAAWD,WAAX,EAAX;AACH;;AACD,SAAOD,QAAP;AACH,CALM;AAOP;;;;;;;;AAOA,OAAO,MAAMG,QAAQ,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACrC,MAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B,OAAO,EAAP;;AAE9B,MAAIA,IAAI,CAACR,MAAL,GAAcS,KAAlB,EAAyB;AACrB;AACAD,IAAAA,IAAI,GAAGA,IAAI,CAACE,SAAL,CAAe,CAAf,EAAkBD,KAAlB,CAAP;AACH,GANoC,CAQrC;;;AACA,QAAME,cAAc,GAAGH,IAAI,CAACI,WAAL,CAAiB,GAAjB,CAAvB;;AACA,MAAID,cAAc,KAAK,CAAC,CAAxB,EAA2B;AACvBH,IAAAA,IAAI,GAAGA,IAAI,CAACE,SAAL,CAAe,CAAf,EAAkBC,cAAlB,CAAP;AACH,GAZoC,CAcrC;;;AACA,SAAOH,IAAI,CAACK,OAAL,CAAa,UAAb,EAAyB,EAAzB,CAAP;AACH,CAhBM","sourcesContent":["/**\n * Capitalizes string.\n *\n * @param  {String} string\n * @return {String}\n */\nconst capitalize = string => {\n    if (!string) return string;\n    return string[0].toUpperCase() + string.slice(1);\n};\n\n/**\n * Capitalizes words.\n *\n * @param  {String} words\n * @return {String}\n */\nexport const capitalizeWords = words => {\n    const wordsArray = words.split(' ');\n\n    // single word\n    if (wordsArray.length === 1) {\n        return capitalize(words);\n    }\n\n    // multiple words\n    return wordsArray.reduce((accumulatedWords, word) => {\n        // first word\n        if (!accumulatedWords) return capitalize(word);\n\n        // empty array item\n        if (!word) return accumulatedWords;\n\n        // concatenate word\n        return `${accumulatedWords} ${capitalize(word)}`;\n    }, '');\n};\n\nlet fullYear;\n\n/**\n * Gets full year.\n *\n * @return {Number}\n */\nexport const getFullYear = () => {\n    if (!fullYear) {\n        fullYear = new Date().getFullYear();\n    }\n    return fullYear;\n};\n\n/**\n * Truncates text.\n *\n * @param  {String} text\n * @param  {Number} [limit]\n * @return {String}\n */\nexport const truncate = (text, limit) => {\n    if (typeof text !== 'string') return '';\n\n    if (text.length > limit) {\n        // truncate string based on limit\n        text = text.substring(0, limit);\n    }\n\n    // truncate to last whitespace if applicable\n    const lastSpaceIndex = text.lastIndexOf(' ');\n    if (lastSpaceIndex !== -1) {\n        text = text.substring(0, lastSpaceIndex);\n    }\n\n    // trim trailing whitespace/periods\n    return text.replace(/[\\s.]+$/g, '');\n};\n"]},"metadata":{},"sourceType":"module"}